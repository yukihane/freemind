<?xml version="1.0" encoding="iso-8859-1"?>
<!--
    (c) by Gorka Puente García, Nov, 11th 2010
    This file is licensed under the GPL.
-->

<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java" xmlns:w="http://schemas.microsoft.com/office/word/2003/wordml" exclude-result-prefixes="java">
	<xsl:output method="text" indent="no" />
	<xsl:strip-space elements="*" />
	<!-- exclude-result-prefixes="java">-->
	<!-- global variables -->
	<xsl:variable name="lastRevisionId">(select if((SELECT count(*) FROM revision ORDER BY rev_id DESC LIMIT 1)&gt;0,(SELECT rev_id FROM revision ORDER BY rev_id DESC LIMIT 1)+1,1))</xsl:variable>
	<xsl:variable name="lastPageId">(SELECT page_id FROM page ORDER BY page_id DESC LIMIT 1)</xsl:variable>
	<xsl:variable name="lastTextId">(SELECT old_id FROM text ORDER BY old_id DESC LIMIT 1)</xsl:variable>
	<xsl:variable name="lastUserId">(SELECT user_id FROM user ORDER BY user_id DESC LIMIT 1)</xsl:variable>
	<xsl:variable name="flag_icons">flag flag-black flag-blue flag-green flag-orange flag-pink flag-yellow</xsl:variable>

	<xsl:template match="map">
		<!-- Wiki admin name -->
		<xsl:text>set @adminName = (SELECT user_name FROM user WHERE user_id=1);</xsl:text>
		<xsl:text>&#xA;</xsl:text>
		<!-- Insert into category (Events) -->
		<xsl:text>INSERT IGNORE into category (cat_title, cat_pages, cat_subcats, cat_files, cat_hidden) values ('Events' , 1, 0, 0, 0 );</xsl:text>
		<!-- New line. -->
		<xsl:text>&#xA;</xsl:text>
		<xsl:apply-templates select="node" />
		<xsl:text>&#xA;</xsl:text>
		<xsl:text>delete from objectcache;</xsl:text>
	</xsl:template>

	<!-- match "node" -->
	<xsl:template match="node">
		<xsl:choose>
			<!-- WSL keywords are not processed "Organigram", "AccessPermission", "Event", "Template" -->
			<xsl:when test="@TEXT ='Organigram' or @TEXT ='Restriction' or @TEXT ='Presentation' or @TEXT ='Event' or @TEXT ='Template' or ancestor-or-self::*/icon[@BUILTIN='info'] or icon[@BUILTIN='info']  or ancestor::node[@TEXT='Event'] or ancestor::node[@TEXT='Restriction'] or ancestor::node[@TEXT='Presentation']">
			</xsl:when>
			<!-- Groups ("Organigram" children) are created-->
			<xsl:when test="../@TEXT='Organigram'">

			</xsl:when>
			<xsl:otherwise>
				<!-- Node titles-->
				<xsl:variable name="node_name_tmp">
					<xsl:value-of select="@TEXT" />
				</xsl:variable>

				<!-- Avoid duplicated nodes except 'Event' ancestors-->
				<xsl:if test="not(preceding::node[@TEXT = $node_name_tmp and not(ancestor::node/@TEXT='Event')])">
					<!-- local variables -->
					<xsl:variable name="depth">
						<xsl:apply-templates select=".." mode="depthMesurement" />
					</xsl:variable>

					<xsl:variable name="rand" select="java:java.lang.Math.random()" />

					<xsl:variable name="timestamp">
						<xsl:value-of select="java:format(java:java.text.SimpleDateFormat.new('yyyyMMddHHmmss'), java:java.util.Date.new())" />
					</xsl:variable>

					<xsl:variable name="namespace">
						<xsl:choose>
							<!-- Organigram as grandparent = User, as parent = Role/Group-->
							<xsl:when test="../../@TEXT='Organigram'">2</xsl:when>
							<xsl:when test="../@TEXT='Template'">10</xsl:when>
							<xsl:when test="@STYLE">
								<xsl:if test="@STYLE ='bubble'">0</xsl:if>
								<xsl:if test="@STYLE ='fork'">14</xsl:if>
							</xsl:when>
							<xsl:otherwise>14</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>

					<!-- Node IDs-->
					<xsl:variable name="node_id">
						<xsl:value-of select="@ID" />
					</xsl:variable>

					<!-- Normalize title-->
					<xsl:variable name="node_name">
						<xsl:call-template name="normalize-title">
							<xsl:with-param name="name" select="@TEXT" />
						</xsl:call-template>
					</xsl:variable>

					<!-- No normalize title-->
					<xsl:variable name="raw_node_name">
						<xsl:value-of select="@TEXT" />
					</xsl:variable>

					<!-- Extract node content (node text) -->
					<xsl:variable name="node_text_tmp">
						<!-- If node is an rss feed (start)-->
						<xsl:if test="icon[contains($flag_icons, @BUILTIN)]">
							<xsl:text>&#xA;</xsl:text>
							<xsl:text>&lt;startFeed /&gt;</xsl:text>
							<xsl:text>&#xA;</xsl:text>
						</xsl:if>
						<xsl:text>Page generated by WSL </xsl:text>
						<!-- If root node add the category tree -->
						<xsl:if test="parent::map">
							<xsl:text>&#xA;</xsl:text>
							<xsl:text>&lt;categorytree mode=all&gt;</xsl:text>
							<xsl:copy-of select="$node_name" />
							<xsl:text>&lt;/categorytree&gt;</xsl:text>
						</xsl:if>
						<!-- Content text from WordProcessingML (XML format generated by Microsoft Word 2003 and 2007) />-->
						<xsl:if test="node/@LINK">
							<xsl:if test="substring(node/@LINK, string-length(node/@LINK)-2, 4) = 'xml'">
								<xsl:choose>
									<xsl:when test="$namespace = 10">
										<xsl:text>__@word2wikiTemplate@__</xsl:text>
										<xsl:value-of select="node/@LINK" />
										<xsl:text>__@word2wikiTemplate@__</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<xsl:text>__@word2wiki@__</xsl:text>
										<xsl:value-of select="node/@LINK" />
										<xsl:text>__@word2wiki@__</xsl:text>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:text>&#xA;</xsl:text>
							</xsl:if>
						</xsl:if>
						<xsl:if test="@LINK">
							<xsl:if test="substring(@LINK, string-length(@LINK)-2, 4) = 'xml'">
								<xsl:choose>
									<xsl:when test="$namespace = 10">
										<xsl:text>__@word2wikiTemplate@__</xsl:text>
										<xsl:value-of select="@LINK" />
										<xsl:text>__@word2wikiTemplate@__</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<xsl:text>__@word2wiki@__</xsl:text>
										<xsl:value-of select="@LINK" />
										<xsl:text>__@word2wiki@__</xsl:text>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:text>&#xA;</xsl:text>
							</xsl:if>
						</xsl:if>
						<!-- Content text from the descendant if info icon />-->
						<xsl:if test="node/icon[@BUILTIN='info']">
							<xsl:text>&#xA;</xsl:text>
							<xsl:for-each select="descendant::node/@TEXT">
								<xsl:value-of select="." />
								<xsl:text>
								</xsl:text>
							</xsl:for-each>
						</xsl:if>
						<!-- Check if the page has events (Add [[Category:Events]] and [[Category:dd/mm/yy]])-->
						<xsl:if test="//node[@TEXT='Event']/descendant::node[@TEXT = $raw_node_name]">
							<xsl:text>&#xA;</xsl:text>
							<xsl:text>[[Category:Events]] &#xA;</xsl:text>
							<!-- Format year/mm/dd-->
							<xsl:for-each select="//node[@TEXT='Event']/*[node/@TEXT = $raw_node_name]">
								<xsl:text>[[Category:</xsl:text>
								<!-- Format the input date. Accept dd/mm/yy and dd/mm/yyy-->
								<xsl:choose>
									<xsl:when test="string-length(@TEXT) = 8">
										<xsl:text>20</xsl:text>
										<xsl:value-of select="substring(@TEXT,7,2)" />
									</xsl:when>
									<xsl:when test="string-length(@TEXT) = 10">
										<xsl:value-of select="substring(@TEXT,7,4)" />
									</xsl:when>
									<xsl:otherwise>Bad formed date</xsl:otherwise>
								</xsl:choose>
								<xsl:text>/</xsl:text>
								<xsl:value-of select="substring(@TEXT,4,2)" />
								<xsl:text>/</xsl:text>
								<xsl:value-of select="substring(@TEXT,1,2)" />
								<xsl:text>]]</xsl:text>
							</xsl:for-each>
						</xsl:if>
						<!-- Check if the page has links to other pages-->
						<xsl:if test="arrowlink">
							<xsl:for-each select="arrowlink">
								<!-- Node DESTINATION-->
								<xsl:variable name="node_destination">
									<xsl:value-of select="@DESTINATION" />
								</xsl:variable>
								<xsl:choose>
									<!-- Check if it is a template-->
									<xsl:when test="//node[@TEXT='Template']/node[@ID=$node_destination]">
										<xsl:text>&#xA;{{Template:</xsl:text>
										<xsl:call-template name="normalize-title">
											<xsl:with-param name="name" select="//node[@ID=$node_destination]/@TEXT" />
										</xsl:call-template>
										<xsl:text>}}</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<!-- Otherwise is a category or an article-->
										<xsl:text>&#xA;[[</xsl:text>
										<xsl:if test="//node[@ID=$node_destination and not(@STYLE='bubble')]">:</xsl:if>
										<xsl:call-template name="normalize-title">
											<xsl:with-param name="name" select="//node[@ID=$node_destination]/@TEXT" />
										</xsl:call-template>
										<xsl:text>]]</xsl:text>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:if>
						<!-- Add its parent category if not root, user or template (e.g., "[[Category:categoryParent]]"-->
						<xsl:if test="not(parent::map) and not($namespace = 2) and not($namespace = 10)">
							<xsl:text>&#xA;[[Category:</xsl:text>
							<xsl:call-template name="normalize-title">
								<xsl:with-param name="name" select="../@TEXT" />
							</xsl:call-template>
							<xsl:text>]]</xsl:text>
						</xsl:if>
						<!-- If node is an rss feed (end)-->
						<xsl:if test="icon[contains($flag_icons, @BUILTIN)]">
							<xsl:text>&#xA;</xsl:text>
							<xsl:text>&lt;endFeed /&gt;</xsl:text>
							<xsl:text>&#xA;</xsl:text>
						</xsl:if>
					</xsl:variable>
					<!-- End node content (node text) -->

					<!-- Escape "\" in node content (node text)-->
					<xsl:variable name="node_text_tmp2">
						<xsl:call-template name="string-replace-all">
							<xsl:with-param name="text" select="$node_text_tmp" />
							<xsl:with-param name="replace" select="'\'" />
							<xsl:with-param name="by" select="'\\'" />
						</xsl:call-template>
					</xsl:variable>

					<!-- Escape "'" in node content (node text)-->
					<xsl:variable name="node_text">
						<xsl:call-template name="string-replace-all">
							<xsl:with-param name="text" select="$node_text_tmp2" />
							<xsl:with-param name="replace" select='"&apos;"' />
							<xsl:with-param name="by" select='"\&apos;"' />
						</xsl:call-template>
					</xsl:variable>

					<!-- MySQL script output start-->
					<xsl:text># Autogenerated </xsl:text>
					<xsl:copy-of select="$node_name" />
					<xsl:text>&#xA;</xsl:text>

					<!-- Only categories-->
					<xsl:if test="$namespace=14">
						<!-- Insert into category -->
						<xsl:text>INSERT IGNORE into category (cat_title, cat_pages, cat_subcats, cat_files, cat_hidden) values ('</xsl:text>
						<xsl:copy-of select="$node_name" />
						<xsl:text>' , 1, 0, 0, 0 );</xsl:text>
						<!-- New line. -->
						<xsl:text>&#xA;</xsl:text>
					</xsl:if>

					<!-- Insert the current node as a page-->
					<xsl:call-template name="new-page">
						<xsl:with-param name="page_title" select="$node_name" />
						<xsl:with-param name="page_namespace" select="$namespace" />
						<xsl:with-param name="rand" select="$rand" />
						<xsl:with-param name="timestamp" select="$timestamp" />
						<xsl:with-param name="lastRevisionId" select="$lastRevisionId" />
						<xsl:with-param name="node_text" select="$node_text" />
						<xsl:with-param name="lastTextId" select="$lastTextId" />
					</xsl:call-template>

					<!-- Check if the page has events to add that event to Category table-->
					<xsl:if test="//node[@TEXT='Event']/descendant::node[@TEXT = $raw_node_name]">
						<!-- Format year/mm/dd-->
						<xsl:for-each select="//node[@TEXT='Event']/*[node/@TEXT = $raw_node_name]">
							<!-- Create var event_date year/mm/dd-->
							<xsl:variable name="event_date">
								<!-- Format the input date. Accept dd/mm/yy and dd/mm/yyyy-->
								<xsl:choose>
									<xsl:when test="string-length(@TEXT) = 8">
										<xsl:text>20</xsl:text>
										<xsl:value-of select="substring(@TEXT,7,2)" />
									</xsl:when>
									<xsl:when test="string-length(@TEXT) = 10">
										<xsl:value-of select="substring(@TEXT,7,4)" />
									</xsl:when>
									<xsl:otherwise>Bad formed date</xsl:otherwise>
								</xsl:choose>
								<xsl:text>/</xsl:text>
								<xsl:value-of select="substring(@TEXT,4,2)" />
								<xsl:text>/</xsl:text>
								<xsl:value-of select="substring(@TEXT,1,2)" />
							</xsl:variable>
							<!-- Insert into category -->
							<xsl:text>INSERT IGNORE into category (cat_title, cat_pages, cat_subcats, cat_files, cat_hidden) values ('</xsl:text>
							<xsl:value-of select="$event_date" />
							<xsl:text>' , 1, 0, 0, 0 );</xsl:text>
							<!-- New line. -->
							<xsl:text>&#xA;</xsl:text>
							<!-- Insert into categorylinks -->
							<xsl:text>INSERT IGNORE into categorylinks (cl_from, cl_to, cl_sortkey, cl_timestamp) values (@pageId, '</xsl:text>
							<!-- parent category (cl_to)-->
							<xsl:value-of select="$event_date" />
							<xsl:text>', '</xsl:text>
							<xsl:copy-of select="$node_name" />
							<xsl:text>', '</xsl:text>
							<xsl:copy-of select="$timestamp" />
							<xsl:text>' );</xsl:text>
							<xsl:text>&#xA;</xsl:text>
						</xsl:for-each>
						<!-- Insert into categorylinks to Category:Events -->
						<xsl:text>INSERT IGNORE into categorylinks (cl_from, cl_to, cl_sortkey, cl_timestamp) values (@pageId, 'Events', '</xsl:text>
						<xsl:copy-of select="$node_name" />
						<xsl:text>', '</xsl:text>
						<xsl:copy-of select="$timestamp" />
						<xsl:text>' );</xsl:text>
						<xsl:text>&#xA;</xsl:text>
					</xsl:if>

					<!-- All except category Root (Link to its parent) -->
					<xsl:if test="not(parent::map)">
						<xsl:choose>
							<!-- Template-->
							<xsl:when test="$namespace=10">
							</xsl:when>
							<!-- Users-->
							<xsl:when test="$namespace=2">
								<!-- Create new user-->
								<!-- Insert into user -->
								<xsl:text>insert into user (user_name, user_password, user_newpassword, user_email, user_options)  values('</xsl:text>
								<xsl:copy-of select="$node_name" />
								<!-- The default password is 12345, change it! Since the password must be changed, the salt is not random (06ce7f6a)-->
								<xsl:text>', CONCAT(':B:06ce7f6a:', MD5(CONCAT('06ce7f6a-', MD5('12345')))), CONCAT(':B:06ce7f6a:', MD5(CONCAT('06ce7f6a-', MD5('12345')))),'','quickbar=1\nunderline=2\ncols=80\nrows=25\nsearchlimit=20\ncontextlines=5\ncontextchars=50\ndisablesuggest=0\nskin=\nmath=1\nusenewrc=0\nrcdays=7\nrclimit=50\nwllimit=250\nhideminor=0\nhidepatrolled=0\nnewpageshidepatrolled=0\nhighlightbroken=1\nstubthreshold=0\npreviewontop=1\npreviewonfirst=0\neditsection=1\neditsectiononrightclick=0\neditondblclick=0\neditwidth=0\nshowtoc=1\nshowtoolbar=1\nminordefault=0\ndate=default\nimagesize=2\nthumbsize=2\nrememberpassword=0\nnocache=0\ndiffonly=0\nshowhiddencats=0\nnorollbackdiff=0\nenotifwatchlistpages=0\nenotifusertalkpages=1\nenotifminoredits=0\nenotifrevealaddr=0\nshownumberswatching=1\nfancysig=0\nexternaleditor=0\nexternaldiff=0\nforceeditsummary=0\nshowjumplinks=1\njustify=0\nnumberheadings=0\nuselivepreview=0\nwatchlistdays=3\nextendwatchlist=0\nwatchlisthideminor=0\nwatchlisthidebots=0\nwatchlisthideown=0\nwatchlisthideanons=0\nwatchlisthideliu=0\nwatchlisthidepatrolled=0\nwatchcreations=0\nwatchdefault=0\nwatchmoves=0\nwatchdeletion=0\nnoconvertlink=0\ngender=unknown\nvariant=en\nlanguage=en\nsearchNs0=1');</xsl:text>
								<xsl:text>&#xA;</xsl:text>
								<!-- Insert into user_groups table -->
								<xsl:text>&#xA;INSERT IGNORE into user_groups  (ug_user, ug_group) values (</xsl:text>
								<xsl:value-of select="$lastUserId" />
								<xsl:text>,'</xsl:text>
								<xsl:value-of select="../@TEXT" />
								<xsl:text>');&#xA;</xsl:text>
								<!-- Insert into logging -->
								<xsl:text>insert IGNORE into logging (log_type, log_action, log_timestamp, log_user, log_user_text, log_namespace, log_title, log_comment, log_params, log_deleted) values ( 'newusers', 'create2','</xsl:text>
								<xsl:copy-of select="$timestamp" />
								<xsl:text>' ,1 , @adminName, 2,'</xsl:text>
								<xsl:copy-of select="$node_name" />
								<xsl:text>', 'User created', 4, 0);</xsl:text>
								<xsl:text>&#xA;</xsl:text>
								<!-- Insert into recentchanges -->
								<xsl:text>INSERT IGNORE into recentchanges (rc_timestamp, rc_cur_time, rc_user, rc_user_text, rc_namespace, rc_title, rc_comment, rc_new, rc_cur_id, rc_this_oldid, rc_type, rc_logid, rc_log_type, rc_log_action, rc_params) values ('</xsl:text>
								<xsl:copy-of select="$timestamp" />
								<xsl:text>',  '</xsl:text>
								<xsl:copy-of select="$timestamp" />
								<xsl:text>',  1, @adminName,</xsl:text>
								<xsl:copy-of select="$namespace" />
								<xsl:text>, '</xsl:text>
								<xsl:copy-of select="$node_name" />
								<xsl:text>','User : </xsl:text>
								<xsl:copy-of select="$node_name" />
								<xsl:text> created', 1, @pageId, </xsl:text>
								<xsl:copy-of select="$lastRevisionId" />
								<xsl:text>+1, </xsl:text>
								<xsl:text>3, (SELECT log_id from logging where log_action='create2' and log_title='</xsl:text>
								<xsl:copy-of select="$node_name" />
								<xsl:text>'), 'newusers', 'create2', 4);</xsl:text>
								<xsl:text>&#xA;</xsl:text>
								<!-- Update site_stats -->
								<xsl:text>update site_stats set ss_users = ss_users + 1;</xsl:text>
								<xsl:text>&#xA;&#xA;</xsl:text>
							</xsl:when>
							<!-- Articles and categories -->
							<xsl:otherwise>
								<!-- Insert into categorylinks -->
								<xsl:text>INSERT IGNORE into categorylinks (cl_from, cl_to, cl_sortkey, cl_timestamp) values (@pageId, '</xsl:text>
								<!-- parent category (cl_to)-->
								<xsl:call-template name="normalize-title">
									<xsl:with-param name="name" select="../@TEXT" />
								</xsl:call-template>
								<xsl:text>', '</xsl:text>
								<xsl:copy-of select="$node_name" />
								<xsl:text>', '</xsl:text>
								<xsl:copy-of select="$timestamp" />
								<xsl:text>' );</xsl:text>
								<xsl:text>&#xA;</xsl:text>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
					<!-- Insert into templatelinks if the page includes a template or into pagelinks otherwise-->
					<xsl:if test="arrowlink">
						<xsl:for-each select="arrowlink">
							<!-- Node DESTINATION-->
							<xsl:variable name="node_destination">
								<xsl:value-of select="@DESTINATION" />
							</xsl:variable>
							<xsl:variable name="node_destination_title">
								<xsl:call-template name="normalize-title">
									<xsl:with-param name="name" select="//node[@ID=$node_destination]/@TEXT" />
								</xsl:call-template>
							</xsl:variable>
							<xsl:choose>
								<!-- Check if it is a TemplatedBy link (template)-->
								<xsl:when test="//node[@TEXT='Template']/node[@ID=$node_destination]">
									<xsl:text>insert IGNORE into templatelinks (tl_from, tl_namespace, tl_title) values( @pageId, 10, '</xsl:text>
									<xsl:value-of select="$node_destination_title" />
									<xsl:text>');</xsl:text>
									<xsl:text>&#xA;</xsl:text>
								</xsl:when>
								<!-- Otherwise it is a RelatedWith link-->
								<xsl:otherwise>
									<xsl:text>insert IGNORE into pagelinks (pl_from, pl_namespace, pl_title) values( @pageId, </xsl:text>
									<xsl:choose>
										<xsl:when test="//node[@ID=$node_destination]/../../@TEXT='Organigram'">2</xsl:when>
										<xsl:when test="//node[@ID=$node_destination]/../@TEXT='Template'">10</xsl:when>
										<xsl:when test="//node[@ID=$node_destination]/@STYLE">
											<xsl:if test="//node[@ID=$node_destination]/@STYLE ='bubble'">0</xsl:if>
											<xsl:if test="//node[@ID=$node_destination]/@STYLE ='fork'">14</xsl:if>
										</xsl:when>
										<xsl:otherwise>14</xsl:otherwise>
									</xsl:choose>
									<xsl:text>, '</xsl:text>
									<xsl:value-of select="$node_destination_title" />
									<xsl:text>');</xsl:text>
									<xsl:text>&#xA;&#xA;</xsl:text>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:if>

					<!-- Root node-->
					<xsl:if test="parent::map">
						<!-- Root node as the Main Page-->
						<xsl:text># Autogenerated Home page &#xA;</xsl:text>
						<xsl:call-template name="new-page">
							<xsl:with-param name="page_title" select="'Mainpage'" />
							<xsl:with-param name="page_namespace" select="'8'" />
							<xsl:with-param name="rand" select="$rand" />
							<xsl:with-param name="timestamp" select="$timestamp" />
							<xsl:with-param name="lastRevisionId" select="$lastRevisionId" />
							<xsl:with-param name="node_text" select="concat('Category:',$node_name)" />
							<xsl:with-param name="lastTextId" select="$lastTextId" />
						</xsl:call-template>
						<!-- Sidebar (nodes with "attach" icon)-->
						<xsl:text># Autogenerated Sidebar &#xA;</xsl:text>
						<xsl:variable name="sidebar_content">
							<!-- Navigation pane-->
							<xsl:if test="/map/node/node[@TEXT='Presentation']/icon[@BUILTIN='list']">
								<xsl:text>* navigation&#xA;** mainpage|mainpage-description&#xA;** portal-url|portal&#xA;** currentevents-url|currentevents&#xA;** recentchanges-url|recentchanges&#xA;** randompage-url|randompage&#xA;** helppage|help&#xA;</xsl:text>
							</xsl:if>
							<!-- Index  pane-->
							<xsl:text>* Index&#xA;</xsl:text>
							<xsl:for-each select="//node/*[icon/@BUILTIN='attach']">
								<xsl:text>**</xsl:text>
								<xsl:choose>
									<!-- Organigram as grandparent = User, as parent = Role/Group-->
									<xsl:when test="$namespace = '2'">
										<xsl:text>User:</xsl:text>
									</xsl:when>
									<xsl:when test="$namespace = '10'">
										<xsl:text>Template:</xsl:text>
									</xsl:when>
									<xsl:when test="$namespace = '14'">
										<xsl:text>Category:</xsl:text>
									</xsl:when>
									<xsl:otherwise>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:call-template name="normalize-title">
									<xsl:with-param name="name" select="@TEXT" />
								</xsl:call-template>
								<xsl:text>|</xsl:text>
								<xsl:call-template name="normalize-title">
									<xsl:with-param name="name" select="@TEXT" />
								</xsl:call-template>
								<xsl:text>&#xA;</xsl:text>
							</xsl:for-each>
							<!-- Search pane-->
							<xsl:if test="/map/node/node[@TEXT='Presentation']/icon[@BUILTIN='xmag']">
								<xsl:text>*SEARCH&#xA;</xsl:text>
							</xsl:if>
							<!-- Toolbox pane-->
							<xsl:if test="/map/node/node[@TEXT='Presentation']/icon[@BUILTIN='edit']">
								<xsl:text>* TOOLBOX&#xA;</xsl:text>
							</xsl:if>
							<xsl:text>* LANGUAGES&#xA;</xsl:text>
						</xsl:variable>
						<!-- Sidebar page-->
						<xsl:call-template name="new-page">
							<xsl:with-param name="page_title" select="'Sidebar'" />
							<xsl:with-param name="page_namespace" select="'8'" />
							<xsl:with-param name="rand" select="$rand" />
							<xsl:with-param name="timestamp" select="$timestamp" />
							<xsl:with-param name="lastRevisionId" select="$lastRevisionId" />
							<xsl:with-param name="node_text" select="$sidebar_content" />
							<xsl:with-param name="lastTextId" select="$lastTextId" />
						</xsl:call-template>
						<!-- WikEd, add text editor if root with "nice" icon-->
						<xsl:if test="icon[@BUILTIN='licq']">
							<xsl:variable name="commonjs_content">
								<xsl:text>/* Any JavaScript here will be loaded for all users on every page load. */&#xA;</xsl:text>
								<xsl:text>// install [[Wikipedia:User:Cacycle/wikEd]] in-browser text editor&#xA;</xsl:text>
								<xsl:text>document.write(\'&lt;script type=\"text/javascript\" src=\"\'&#xA;</xsl:text>
								<xsl:text>+ \'http://en.wikipedia.org/w/index.php?title=User:Cacycle/wikEd.js\'&#xA;</xsl:text>
								<xsl:text>+ \'&amp;action=raw&amp;ctype=text/javascript\"&gt;&lt;/\' + \'script&gt;\');&#xA;</xsl:text>
							</xsl:variable>
							<!-- Common.js page with text to activate WikEd-->
							<xsl:text># Autogenerated Common.js &#xA;</xsl:text>
							<xsl:call-template name="new-page">
								<xsl:with-param name="page_title" select="'Common.js'" />
								<xsl:with-param name="page_namespace" select="'8'" />
								<xsl:with-param name="rand" select="$rand" />
								<xsl:with-param name="timestamp" select="$timestamp" />
								<xsl:with-param name="lastRevisionId" select="$lastRevisionId" />
								<xsl:with-param name="node_text" select="$commonjs_content" />
								<xsl:with-param name="lastTextId" select="$lastTextId" />
							</xsl:call-template>
						</xsl:if>
						<!-- Calendar in sidebar (Leftnav)-->
						<xsl:text># Autogenerated Leftnav &#xA;</xsl:text>
						<xsl:call-template name="new-page">
							<xsl:with-param name="page_title" select="'Leftnav'" />
							<xsl:with-param name="page_namespace" select="'8'" />
							<xsl:with-param name="rand" select="$rand" />
							<xsl:with-param name="timestamp" select="$timestamp" />
							<xsl:with-param name="lastRevisionId" select="$lastRevisionId" />
							<xsl:with-param name="node_text" select="'&lt;calendar /&gt;'" />
							<xsl:with-param name="lastTextId" select="$lastTextId" />
						</xsl:call-template>
					</xsl:if>
					<!-- End root node-->

					<!-- If node has a discussion Page -->
					<xsl:if test="icon[@BUILTIN='stop-sign']">
						<xsl:text># Discussion page for </xsl:text>
						<xsl:copy-of select="$node_name" />
						<xsl:text>&#xA;</xsl:text>
						<xsl:call-template name="new-page">
							<xsl:with-param name="page_title" select="$node_name" />
							<xsl:with-param name="page_namespace" select="$namespace + 1" />
							<xsl:with-param name="rand" select="$rand" />
							<xsl:with-param name="timestamp" select="$timestamp" />
							<xsl:with-param name="lastRevisionId" select="$lastRevisionId" />
							<xsl:with-param name="node_text" select="$node_text" />
							<xsl:with-param name="lastTextId" select="$lastTextId" />
						</xsl:call-template>
					</xsl:if>

				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
		<!-- Apply to its subnodes-->
		<xsl:apply-templates select="node" />
	</xsl:template>
	<!-- End match "node" -->

	<!-- Replacement template -->
	<xsl:template name="string-replace-all">
		<xsl:param name="text" />
		<xsl:param name="replace" />
		<xsl:param name="by" />
		<xsl:choose>
			<xsl:when test="contains($text, $replace)">
				<xsl:value-of select="substring-before($text,$replace)" />
				<xsl:value-of select="$by" />
				<xsl:call-template name="string-replace-all">
					<xsl:with-param name="text" select="substring-after($text,$replace)" />
					<xsl:with-param name="replace" select="$replace" />
					<xsl:with-param name="by" select="$by" />
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$text" />
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<!-- Normalize name template -->
	<xsl:template name="normalize-title">
		<xsl:param name="name" />

		<!-- Escape "\" in node content (node text)-->
		<xsl:variable name="node_name_tmp1">
			<xsl:call-template name="string-replace-all">
				<xsl:with-param name="text" select="normalize-space($name)" />
				<xsl:with-param name="replace" select="'\'" />
				<xsl:with-param name="by" select="'\\'" />
			</xsl:call-template>
		</xsl:variable>

		<!-- Escape "'" in page titles-->
		<xsl:variable name="node_name_tmp2">
			<xsl:call-template name="string-replace-all">
				<xsl:with-param name="text" select="$node_name_tmp1" />
				<xsl:with-param name="replace" select='"&apos;"' />
				<xsl:with-param name="by" select='"\&apos;"' />
			</xsl:call-template>
		</xsl:variable>

		<!-- Escape " " in page titles-->
		<xsl:variable name="node_name_tmp3">
			<xsl:call-template name="string-replace-all">
				<xsl:with-param name="text" select="$node_name_tmp2" />
				<xsl:with-param name="replace" select='" "' />
				<xsl:with-param name="by" select='"_"' />
			</xsl:call-template>
		</xsl:variable>

		<!-- Capitalize first letter-->
		<xsl:variable name="node_name_tmp4">
			<!-- Optimized "concat(upper-case(substring($node_name_tmp3, 1, 1)), substring($node_name_tmp3, 2))" -->
			<xsl:value-of select="concat(translate(substring($node_name_tmp3,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ'),substring($node_name_tmp3,2,string-length($node_name_tmp3)))" />
		</xsl:variable>

		<xsl:value-of select="$node_name_tmp4" />
	</xsl:template>

	<!-- New page template-->
	<xsl:template name="new-page">
		<xsl:param name="page_title" />
		<xsl:param name="page_namespace" />
		<xsl:param name="rand" />
		<xsl:param name="timestamp" />
		<xsl:param name="lastRevisionId" />
		<xsl:param name="node_text" />
		<xsl:param name="lastTextId" />

		<!-- Insert into page -->
		<xsl:text>INSERT IGNORE into page (page_namespace, page_title, page_counter, page_is_redirect, page_is_new, page_random, page_touched, page_latest, page_len) values (</xsl:text>
		<xsl:value-of select="$page_namespace" />
		<xsl:text>, '</xsl:text>
		<xsl:value-of select="$page_title" />
		<xsl:text>', 1, 0, 1, </xsl:text>
		<xsl:copy-of select="$rand" />
		<xsl:text>,</xsl:text>
		<xsl:copy-of select="$timestamp" />
		<xsl:text>,</xsl:text>
		<xsl:copy-of select="$lastRevisionId" />
		<xsl:text>, </xsl:text>
		<xsl:value-of select="string-length($node_text)" />
		<xsl:text>);</xsl:text>
		<xsl:text>&#xA;</xsl:text>

		<!-- id of the page -->
		<xsl:text>set @pageId = (SELECT page_id FROM page WHERE page_title='</xsl:text>
		<xsl:value-of select="$page_title" />
		<xsl:text>' and page_namespace=</xsl:text>
		<xsl:value-of select="$page_namespace" />
		<xsl:text>);</xsl:text>
		<xsl:text>&#xA;</xsl:text>

		<!-- Insert into text -->
		<xsl:text>INSERT IGNORE into text (old_text, old_flags) values ('</xsl:text>
		<xsl:copy-of select="$node_text" />
		<xsl:text>', 'utf-8');</xsl:text>
		<xsl:text>&#xA;</xsl:text>

		<!-- Insert into revision -->
		<xsl:text>INSERT IGNORE into revision (rev_page, rev_text_id, rev_user, rev_user_text, rev_timestamp, rev_len) values (@pageId,</xsl:text>
		<xsl:copy-of select="$lastTextId" />
		<xsl:text>, 1, @adminName, '</xsl:text>
		<xsl:copy-of select="$timestamp" />
		<xsl:text>',</xsl:text>
		<xsl:value-of select="string-length($node_text)" />
		<xsl:text>);</xsl:text>
		<xsl:text>&#xA;</xsl:text>

		<!-- Insert into logging-->
		<xsl:text>INSERT IGNORE into logging (log_type, log_action, log_timestamp, log_user, log_user_text, log_namespace, log_title, log_page) values ('patrol', 'patrol' ,'</xsl:text>
		<xsl:copy-of select="$timestamp" />
		<xsl:text>' , 1, @adminName, </xsl:text>
		<xsl:value-of select="$page_namespace" />
		<xsl:text>, '</xsl:text>
		<xsl:value-of select="$page_title" />
		<xsl:text>', </xsl:text>
		<xsl:text>@pageId </xsl:text>
		<xsl:text>);</xsl:text>
		<xsl:text>&#xA;</xsl:text>

		<!-- Insert into recentchanges -->
		<xsl:text>INSERT IGNORE into recentchanges (rc_timestamp, rc_cur_time, rc_user, rc_user_text, rc_namespace, rc_title, rc_comment, rc_new, rc_cur_id, rc_this_oldid, rc_type, rc_patrolled) values ('</xsl:text>
		<xsl:copy-of select="$timestamp" />
		<xsl:text>',  '</xsl:text>
		<xsl:copy-of select="$timestamp" />
		<xsl:text>',  1, @adminName, </xsl:text>
		<xsl:value-of select="$page_namespace" />
		<xsl:text>, '</xsl:text>
		<xsl:value-of select="$page_title" />
		<xsl:text>', 'Autogenerated page: </xsl:text>
		<xsl:value-of select="$page_title" />
		<xsl:text>', 1, @pageId,</xsl:text>
		<xsl:copy-of select="$lastRevisionId" />
		<xsl:text>,1 ,1 );</xsl:text>
		<xsl:text>&#xA;</xsl:text>

		<!-- Update site_stats -->
		<xsl:text>update site_stats set ss_total_edits = ss_total_edits + 1;</xsl:text>
		<xsl:text>&#xA;</xsl:text>
		<xsl:text>update site_stats set ss_total_pages = ss_total_pages + 1;</xsl:text>
		<xsl:text>&#xA;&#xA;</xsl:text>
	</xsl:template>

</xsl:stylesheet>
